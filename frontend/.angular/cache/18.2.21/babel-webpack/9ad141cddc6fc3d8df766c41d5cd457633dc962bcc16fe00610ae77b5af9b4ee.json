{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    http;\n    base = environment.apiBase;\n    customerKey = 'mb_customer';\n    customer$ = new BehaviorSubject(null);\n    customerChanges$ = this.customer$.asObservable();\n    constructor(http) {\n      this.http = http;\n      // hydrate from localStorage\n      const raw = localStorage.getItem(this.customerKey);\n      if (raw) {\n        try {\n          this.customer$.next(JSON.parse(raw));\n        } catch {/* ignore */}\n      }\n    }\n    login(email, password) {\n      return this.http.post(`${this.base}/api/auth/login`, {\n        email,\n        password\n      }).pipe(tap(c => this.storeCustomer(c)));\n    }\n    register(payload) {\n      return this.http.post(`${this.base}/api/customers`, payload).pipe(tap(c => this.storeCustomer(c)) // auto-login after register\n      );\n    }\n    listAccounts() {\n      const c = this.getCurrentCustomer();\n      if (!c) throw new Error('Not logged in');\n      return this.http.get(`${this.base}/api/accounts/by-customer/${c.id}`);\n    }\n    getAccount(id) {\n      return this.http.get(`${this.base}/api/accounts/${id}`);\n    }\n    getTransactions(id) {\n      return this.http.get(`${this.base}/api/accounts/${id}/transactions`);\n    }\n    deposit(id, amount, note) {\n      return this.http.post(`${this.base}/api/accounts/${id}/deposit`, {\n        amount,\n        note\n      });\n    }\n    withdraw(id, amount, note) {\n      return this.http.post(`${this.base}/api/accounts/${id}/withdraw`, {\n        amount,\n        note\n      });\n    }\n    transfer(fromAccountId, toAccountId, amount, note) {\n      return this.http.post(`${this.base}/api/accounts/transfer`, {\n        fromAccountId,\n        toAccountId,\n        amount,\n        note\n      });\n    }\n    createAccount(payload) {\n      return this.http.post(`${this.base}/api/accounts`, payload);\n    }\n    deleteAccount(id) {\n      return this.http.delete(`${this.base}/api/accounts/${id}`);\n    }\n    closeAccount(id) {\n      return this.http.post(`${this.base}/api/accounts/${id}/close`, {});\n    }\n    updateProfile(id, payload) {\n      return this.http.patch(`${this.base}/api/customers/${id}`, payload).pipe(tap(c => this.storeCustomer(c)));\n    }\n    logout() {\n      localStorage.removeItem(this.customerKey);\n      this.customer$.next(null);\n    }\n    isLoggedIn() {\n      return !!this.customer$.value;\n    }\n    getCurrentCustomer() {\n      return this.customer$.value;\n    }\n    storeCustomer(c) {\n      localStorage.setItem(this.customerKey, JSON.stringify(c));\n      this.customer$.next(c);\n    }\n    static ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}