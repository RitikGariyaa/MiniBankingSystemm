{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport let TokenInterceptor = /*#__PURE__*/(() => {\n  class TokenInterceptor {\n    auth;\n    constructor(auth) {\n      this.auth = auth;\n    }\n    intercept(req, next) {\n      // Fallback in case hot-reload or a refactor temporarily removes getToken\n      let token = null;\n      try {\n        const svc = this.auth;\n        if (svc && typeof svc.getToken === 'function') {\n          token = svc.getToken();\n        } else {\n          token = localStorage.getItem('jwt_token');\n        }\n      } catch {/* ignore */}\n      if (token) {\n        req = req.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      }\n      return next.handle(req);\n    }\n    static ɵfac = function TokenInterceptor_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TokenInterceptor)(i0.ɵɵinject(i1.AuthService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TokenInterceptor,\n      factory: TokenInterceptor.ɵfac\n    });\n  }\n  return TokenInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}